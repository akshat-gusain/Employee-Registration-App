@model List<MyMvcApp.Models.RegisterViewModel>

<h2 class="employee-list-heading">Employee List</h2>

<table class="table">
    <thead>
        <tr>
            <th>Employee ID</th>
            <th>Employee Name</th>
            <th>Email</th>
            <th>Edit</th>
            <th>Delete</th>
        </tr>
    </thead>
    <tbody>
        @if (Model != null && Model.Count > 0)
        {
            foreach (var user in Model)
            {
                <tr>
                    <td>@user.EmpId</td> <!-- Display Employee ID -->
                    <td>@user.EmpName</td> <!-- Display Employee Name -->
                    <td>@user.EmpEmail</td> <!-- Display Employee Email -->
                    <td>
                        <a href="@Url.Action("Edit", "Account", new { id = user.EmpId })" class="btn-edit">Edit</a>
                    </td>
                    <td>
                        <button type="button" class="btn-delete" onclick="confirmDelete('@user.EmpId')">Delete</button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="5">No users found.</td> <!-- Message if no users -->
            </tr>
        }
    </tbody>
</table>

<!-- Success message -->
<div id="successMessage" class="success-message" style="display: none;">
    User deleted successfully!
</div>

<!-- Custom delete confirmation modal -->
<div id="deleteModal" class="modal">
    <div class="modal-content">
        <p>Are you sure you want to delete this user?</p>
        <!-- Button container to hold both buttons -->
        <div class="button-container">
            <button id="confirmDeleteBtn" class="btn-confirm">Yes</button>
            <button id="cancelDeleteBtn" class="btn-cancel">Cancel</button>
        </div>
    </div>
</div>

<style>

    .btn-edit {
        background-color: #3498db; /* Blue background */
        color: white; /* White text */
        padding: 10px 20px; /* Padding around the button */
        border: none;
        cursor: pointer;
        border-radius: 5px;
        text-decoration: none; /* Remove underline from the link */
        display: inline-block; /* Ensure the button-like behavior */
    }

        /* Styling for hover on Edit button */
        .btn-edit:hover {
            background-color: #2980b9; /* Darker blue on hover */
            color: white; /* Make sure text remains visible */
            text-decoration: none; /* No underline on hover */
        }

    .success-message {
        position: fixed; /* Keep it fixed in place */
        top: 50%; /* Center vertically */
        left: 50%; /* Center horizontally */
        transform: translate(-50%, -50%); /* Perfectly center by offsetting 50% in both directions */
        width: 300px; /* Set a fixed width for the message */
        padding: 15px; /* Padding inside the box */
        background-color: #d4edda; /* Light green background */
        color: #155724; /* Dark green text */
        border: 1px solid #c3e6cb; /* Border matching the background */
        border-radius: 5px; /* Rounded corners */
        text-align: center; /* Center the text */
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Soft shadow for depth */
        z-index: 9999; /* Ensure it's above other elements */
    }

    /* Modal container */
    .modal {
        display: none; /* Initially hidden */
        position: fixed;
        z-index: 1; /* Make sure it's above other content */
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5); /* Dimmed background */
        justify-content: center; /* Horizontally center the modal */
        align-items: center; /* Vertically center the modal */
    }

    /* Modal content box */
    .modal-content {
        background-color: #fff;
        padding: 20px;
        border-radius: 10px;
        width: 400px; /* Set a width for the modal content */
        text-align: center; /* Center the content inside */
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Add some shadow for depth */
    }

    /* Container to hold buttons in a row */
    .button-container {
        display: flex;
        justify-content: center; /* Centers the buttons horizontally */
        gap: 10px; /* Add spacing between buttons */
        margin-top: 20px; /* Add some space above buttons */
    }

    /* Buttons inside the modal */
    .btn-confirm, .btn-cancel {
        padding: 10px 20px;
        border: none;
        cursor: pointer;
        width: 120px; /* Make buttons the same width */
        border-radius: 5px;
    }

    /* Confirm button (adjusted to a softer red) */
    .btn-confirm {
        background-color: #e74c3c; /* Softer red */
        color: white;
        font-weight: bold;
    }

    /* Cancel button (neutral color) */
    .btn-cancel {
        background-color: #7f8c8d; /* Neutral gray */
        color: white;
        font-weight: bold;
    }

        /* Add hover effect for better user interaction */
        .btn-confirm:hover, .btn-cancel:hover {
            opacity: 0.9;
        }
</style>

<script>
    let deleteEmpId = null;

    // Function to show the custom delete confirmation modal
    function confirmDelete(empId) {
        deleteEmpId = empId;
        document.getElementById('deleteModal').style.display = 'flex'; // Show the modal
    }

    // Function to actually delete the user
    document.getElementById('confirmDeleteBtn').addEventListener('click', async function () {
        if (deleteEmpId) {
            try {
                const response = await fetch(`/api/Registration/DeleteRegistration/${deleteEmpId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                if (response.ok) {
                    const data = await response.json();
                    if (data.statusCode === 200) {
                        // Hide the modal
                        document.getElementById('deleteModal').style.display = 'none';

                        // Show success message
                        const successMessage = document.getElementById('successMessage');
                        successMessage.style.display = 'block';

                        // Reload the page after 2 seconds
                        setTimeout(() => {
                            location.reload();
                        }, 2000);
                    } else {
                        alert("Failed to delete user: " + data.statusMessage);
                    }
                } else {
                    alert('Failed to delete user.');
                }
            } catch (error) {
                console.error('Error:', error);
                alert("An error occurred: " + error.message);
            }
        }
    });

    // Function to cancel the deletion and hide the modal
    document.getElementById('cancelDeleteBtn').addEventListener('click', function () {
        document.getElementById('deleteModal').style.display = 'none';
    });
</script>
